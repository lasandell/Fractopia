precision highp float;

uniform vec4 rect;
uniform vec2 resolution;
uniform vec3 startColor;
uniform vec3 endColor;
uniform int useHsb;
const int maxIterations = 500;

vec2 square(vec2 v) { return vec2(v.x * v.x - v.y * v.y, 2. * v.x * v.y); }

vec3 hsv2rgb(vec3 c)
{
	if (useHsb == 0) return c;

    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 rgb2hsv(vec3 c)
{
	if (useHsb == 0) return c;

    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

void main() {
	float left = rect.x;
	float top = rect.y;
	float width = rect.z;
	float height = rect.w;

	vec2 coord = vec2(gl_FragCoord.x, resolution.y - gl_FragCoord.y);

	vec2 c = (gl_FragCoord.xy - vec2(0.5,0.5)) / resolution * vec2(width, height) + vec2(left, top);
	vec2 z = c;
	int iterations = 0;
	for(int it = 0; it < maxIterations; it++)
	{
		if (dot(z, z) >= 4.) break;
		iterations = it;
		iterations++;
		z = square(z) + c; 
	}
	
	vec3 convStartColor = rgb2hsv(startColor);
	vec3 convEndColor = rgb2hsv(endColor);

	vec3 color = convStartColor + ((convEndColor - convStartColor) / float(maxIterations)) * float(iterations);
	gl_FragColor = vec4(hsv2rgb(color), 1);
}
